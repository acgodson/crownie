# 1inch API Key (Required)
ONEINCH_API_KEY=your_1inch_api_key_from_portal_1inch_dev

# ICP Configuration
IC_HOST=https://ic0.app
II_URL=https://identity.ic0.app
CANISTER_ID=rdmx6-jaaaa-aaaah-qdrqq-cai



 No, dual HTLCs are NOT part of 1inch Fusion+ standard.

  What 1inch Fusion+ Actually Does

  1inch Fusion+ is single-chain - it only handles swaps within Ethereum:
  - Users create gas-free orders on Ethereum
  - Resolvers compete in Dutch auctions on Ethereum
  - Settlement happens on Ethereum via 1inch contracts
  - No cross-chain functionality built-in

  Your Architecture is a Custom Extension

  Looking at your bridge.ts:28-94, you're creating a hybrid approach:

  // This is 1inch Fusion+ standard part
  const order = Sdk.CrossChainOrder.new(...)

  // This is your custom HTLC extension  
  const secret = uint8ArrayToHex(crypto.getRandomValues(new Uint8Array(32)));
  const hashLock = Sdk.HashLock.forSingleFill(secret);

  You're using:
  - 1inch's order format and Dutch auction mechanism
  - Your own HTLC layer for cross-chain atomicity

  Why This Makes Sense

  1inch Fusion+ gives you:
  - ✅ Proven order matching system
  - ✅ Dutch auction price discovery
  - ✅ Gas-free user experience
  - ✅ Established resolver network

  Your HTLC addition provides:
  - ✅ Cross-chain atomic guarantees
  - ✅ Trustless ICP integration
  - ✅ No wrapped tokens needed

  The Architecture Layers

  ┌─────────────────────────────────────┐
  │     Your Custom HTLC Layer         │ ← Cross-chain atomicity
  ├─────────────────────────────────────┤
  │     1inch Fusion+ Standard         │ ← Order matching & auctions
  ├─────────────────────────────────────┤
  │     Ethereum Settlement Layer      │ ← Base blockchain
  └─────────────────────────────────────┘

  So you're extending 1inch Fusion+ to support cross-chain swaps, not replacing it. The dual HTLC requirement comes from the fundamental challenge of cross-chain
  atomicity, not from 1inch specifications.