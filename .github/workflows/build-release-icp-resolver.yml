name: Build and Release ICP Resolver Backend Canister

on:
  push:
    branches:
      - main
    paths:
      - "bridges/fusion-icp-bridge/package.json"
      - "bridges/fusion-icp-bridge/src/**"
      - "bridges/fusion-icp-bridge/dfx.json"
      - "bridges/fusion-icp-bridge/Cargo.toml"

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          CURRENT_VERSION=$(jq -r '.version' bridges/fusion-icp-bridge/package.json)
          echo "Current version: $CURRENT_VERSION"

          git checkout HEAD~1 -- bridges/fusion-icp-bridge/package.json 2>/dev/null || true
          PREVIOUS_VERSION=$(jq -r '.version' bridges/fusion-icp-bridge/package.json 2>/dev/null || echo "0.0.0")
          echo "Previous version: $PREVIOUS_VERSION"

          git checkout HEAD -- bridges/fusion-icp-bridge/package.json

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          fi

      - name: Debug check-version outputs
        run: |
          echo "version-changed=${{ steps.check.outputs.changed }}"
          echo "new-version=${{ steps.check.outputs.version }}"

  build-and-release:
    needs: check-version
    if: ${{ needs.check-version.outputs.version-changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'bridges/fusion-icp-bridge/package.json'

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: Install dfx
        uses: dfinity/setup-dfx@main
        with:
          dfx-version: "0.22.0"

      - name: Install candid-extractor
        run: cargo install candid-extractor

      - name: Install ic-wasm
        run: cargo install ic-wasm

      - name: Confirm dfx installation
        run: dfx --version

      - name: Install dependencies
        run: |
          cd bridges/fusion-icp-bridge
          npm install

      - name: Build Rust canisters
        run: |
          cd bridges/fusion-icp-bridge
          # Build resolver canister
          cargo build --target wasm32-unknown-unknown --release --package resolver_canister_backend
          # Build wallet canister
          cargo build --target wasm32-unknown-unknown --release --package wallet_canister
          # Build escrow canister
          cargo build --target wasm32-unknown-unknown --release --package icp_escrow_canister

      - name: Generate optimized WASM files
        run: |
          cd bridges/fusion-icp-bridge
          mkdir -p wasms
          
          # Optimize resolver canister WASM
          ic-wasm target/wasm32-unknown-unknown/release/resolver_canister_backend.wasm \
            -o wasms/resolver_canister_backend.wasm shrink
          
          # Optimize wallet canister WASM
          ic-wasm target/wasm32-unknown-unknown/release/wallet_canister.wasm \
            -o wasms/wallet_canister.wasm shrink
          
          # Optimize escrow canister WASM
          ic-wasm target/wasm32-unknown-unknown/release/icp_escrow_canister.wasm \
            -o wasms/icp_escrow_canister.wasm shrink

      - name: Generate Candid files
        run: |
          cd bridges/fusion-icp-bridge
          mkdir -p candid
          
          # Extract candid from resolver canister
          candid-extractor wasms/resolver_canister_backend.wasm > candid/resolver_canister_backend.did
          
          # Extract candid from wallet canister
          candid-extractor wasms/wallet_canister.wasm > candid/wallet_canister.did
          
          # Extract candid from escrow canister
          candid-extractor wasms/icp_escrow_canister.wasm > candid/icp_escrow_canister.did

      - name: Generate TypeScript declarations
        run: |
          cd bridges/fusion-icp-bridge
          npm run build

      - name: Verify build artifacts
        run: |
          cd bridges/fusion-icp-bridge
          
          # Check WASM files exist
          if [ ! -f wasms/resolver_canister_backend.wasm ]; then
            echo "❌ resolver_canister_backend.wasm missing"
            exit 1
          fi
          if [ ! -f wasms/wallet_canister.wasm ]; then
            echo "❌ wallet_canister.wasm missing"
            exit 1
          fi
          if [ ! -f wasms/icp_escrow_canister.wasm ]; then
            echo "❌ icp_escrow_canister.wasm missing"
            exit 1
          fi
          
          # Check Candid files exist
          if [ ! -f candid/resolver_canister_backend.did ]; then
            echo "❌ resolver_canister_backend.did missing"
            exit 1
          fi
          if [ ! -f candid/wallet_canister.did ]; then
            echo "❌ wallet_canister.did missing"
            exit 1
          fi
          if [ ! -f candid/icp_escrow_canister.did ]; then
            echo "❌ icp_escrow_canister.did missing"
            exit 1
          fi
          
          echo "✅ All build artifacts verified"

      - name: Create distribution package
        run: |
          cd bridges/fusion-icp-bridge
          
          # Create distribution directory
          mkdir -p dist/fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}
          
          # Copy WASM files
          cp wasms/*.wasm dist/fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}/
          
          # Copy Candid files
          cp candid/*.did dist/fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}/
          
          # Copy dfx.json template
          cp dfx.json dist/fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}/dfx.template.json
          
          # Copy package.json
          cp package.json dist/fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}/
          
          # Copy TypeScript declarations
          cp -r dist/* dist/fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}/ 2>/dev/null || true
          
          # Create installation guide
          cat > dist/fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}/INSTALLATION.md << 'EOF'
          # Fusion ICP Resolver Installation Guide
          
          ## Quick Setup
          
          1. Copy the WASM and Candid files to your project
          2. Add canister configuration to your dfx.json
          3. Configure EVM chain settings
          4. Deploy and initialize
          
          See the detailed README for complete setup instructions.
          EOF

      - name: Create release archive
        run: |
          cd bridges/fusion-icp-bridge/dist
          tar -czf fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}.tar.gz fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}/
          zip -r fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}.zip fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}
          release_name: Fusion ICP Resolver Backend v${{ needs.check-version.outputs.new-version }}
          body: |
            ## Fusion ICP Resolver Backend v${{ needs.check-version.outputs.new-version }}
            
            **Complete ICP Cross-Chain Bridge Solution**
            
            ### Components Included:
            - 🔗 **Resolver Canister**: Main orchestrator for cross-chain swaps between EVM chains and ICP
            - 💰 **Wallet Canister**: ICRC token management with controlled access for resolver operations
            - 🔒 **Escrow Factory**: Deploys HTLC-compatible escrow contracts following fusion pattern
            - 🌐 **EVM Integration**: Uses EVM RPC canister for seamless blockchain interactions
            
            ### Key Features:
            - **Bidirectional Swaps**: EVM ↔ ICP fusion swaps
            - **HTLC**: Hash Time-Locked escrow cannister deployment
            - **EVM Multi-Chain Support**: Configurable for Ethereum, Polygon, BSC etc.
            - **Wallet Cannister and ICRC Token Support**: Integration with ICP token standards
            
            ### Configuration:
            - Connects to EVM Resolver via EVM RPC canister and chain-key cryptography
            
            ### Quick Start:
            1. Download and extract the release package
            2. Copy WASM files to your project
            3. Configure dfx.json with included template
            4. Deploy and initialize canisters
            
            Built from commit: ${{ github.sha }}
            
            📖 **See README.md for detailed setup and configuration instructions**

          draft: false
          prerelease: false

      - name: Upload tar.gz release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bridges/fusion-icp-bridge/dist/fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}.tar.gz
          asset_name: fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload zip release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bridges/fusion-icp-bridge/dist/fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}.zip
          asset_name: fusion-icp-resolver-v${{ needs.check-version.outputs.new-version }}.zip
          asset_content_type: application/zip

      - name: Upload resolver WASM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bridges/fusion-icp-bridge/wasms/resolver_canister_backend.wasm
          asset_name: resolver_canister_backend.wasm
          asset_content_type: application/wasm

      - name: Upload wallet WASM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bridges/fusion-icp-bridge/wasms/wallet_canister.wasm
          asset_name: wallet_canister.wasm
          asset_content_type: application/wasm

      - name: Upload escrow WASM
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bridges/fusion-icp-bridge/wasms/icp_escrow_canister.wasm
          asset_name: icp_escrow_canister.wasm
          asset_content_type: application/wasm

      - name: Upload Candid files
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bridges/fusion-icp-bridge/candid/resolver_canister_backend.did
          asset_name: resolver_canister_backend.did
          asset_content_type: text/plain

      - name: Cleanup
        if: always()
        run: |
          cd bridges/fusion-icp-bridge
          rm -rf wasms/
          rm -rf candid/
          rm -rf dist/
          rm -rf target/wasm32-unknown-unknown/release/